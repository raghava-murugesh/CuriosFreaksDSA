1 . Write a program that gets n as input and print the number of digits in the number
Testcase 1 :
Input : 
325345
Expected output:
6


Solution :
n = int(input("Enter a Number : "))
count = 0
while (n>0):
    ld = n%10
    count = count +1
    n = n//10
    
print (count)

----------------------------------------------------------------------------------------------------------------

2. Palindrome Problem -> https://www.geeksforgeeks.org/problems/palindrome0746/1

solution:

class Solution:
    def isPalindrome(self, n):
		if n<0:
		    return False
		if n<10:
		    return True
		    
		original_number = n
		reversed_number = 0
		
		while (n>0):
		    last_digit = n%10
		    reversed_number = reversed_number * 10 + last_digit
		    n = n//10
		    
		return original_number == reversed_number

--------------------------------------------------------------------------------------------------------------------------

3. Factorial Problem -> https://www.geeksforgeeks.org/problems/factorial5739/1

solution:

class Solution:
    def factorial (self, n):
        # code here
        fact = 1
        for i in range(1, n+1):
            fact = fact * i
        return fact

--------------------------------------------------------------------------------------------------------------------------

4. Prime Number -> https://www.geeksforgeeks.org/problems/prime-number2314/1

Solution :

class Solution:
    def isPrime(self, n):
        if n <= 1:
            return False
        if n == 2:
            return True
        if n%2 == 0:
            return False
        for i in range (3, int(n**0.5) +1, 2):
            if n % i == 0:
                return False
        return True

--------------------------------------------------------------------------------------------------------------------------

5. Write a program that gets n as input and print all the prime numbers till that number.
Testcase 1 :
Input : 
5
Expected output:
2 3 5

Solution :

class Solution:
    def isPrime(self, n):
	if n <= 1:
	    return False
	if n == 2:
	    return True
	if n % 2 == 0:
	    return False
	for i in range (3, int(n**0.5) +1, 2):
	     if n%i == 0:
		return False
	return True

     def printPrime(self, n):
	for i in range (2, n+1):
	    if self.isPrime(i):
		print(i, end=" ")

n = int(input("Enter a Number : "))
sol = Solution()
sol.printPrimes(n)
	
--------------------------------------------------------------------------------------------------------------------------

6. Number of Divisors -> https://www.geeksforgeeks.org/problems/number-of-divisors1631/1?

Solution :

class Solution:
    def countDivisors(self, n):
        # code here
        divisors = 0
        for i in range(1, int(n**0.5) +1):
            if n%1 == 0:
                if i%3 == 0:
                    divisors += 1
            if i != n//i and (n//i)%3 == 0:
                divisors += 1
                
        return divisors

--------------------------------------------------------------------------------------------------------------------------

7. Given two positive integers a and b, find GCD of a and b. -> https://www.geeksforgeeks.org/problems/gcd-of-two-numbers3459/1

Solution :

class Solution:
    def gcd(self, a: int, b: int) -> int:
        while b:  # Continue until b becomes 0
            a, b = b, a % b  # Replace a with b, and b with a % b
        return a  # When b is 0, a is the GCD

--------------------------------------------------------------------------------------------------------------------------

8. Middle of three -> https://www.geeksforgeeks.org/problems/middle-of-three2926/1

Solution :


class Solution:
    def middle(self, a, b, c):
        #code 
        if a>b:
            if a>c:
                return b if b>c else c
            else:
                return a
        else:
            if b>c:
                return a if a>c else c
            else :
                return b 
            
--------------------------------------------------------------------------------------------------------------------------

9. Find n-th term of series -> https://www.geeksforgeeks.org/problems/find-n-th-term-of-series-1-3-6-10-15-215506/1

Solution : loop based approach
class Solution:
    def findNthTerm(self, n):
        # code here 
        sum = 0
        for i in range (1, n+1):
            sum = sum + i
            
        return sum

more optimized approach
class Solution:
    def findNthTerm(self, n):
        # code here 
        return n * (n + 1) // 2

--------------------------------------------------------------------------------------------------------------------------

10. Special Series Sum -> https://www.geeksforgeeks.org/problems/special-series-sum0903/1

Solution : 
class Solution:
    def sumOfTheSeries(self, n):  
        return n * (n + 1) * (n + 2) // 6  

--------------------------------------------------------------------------------------------------------------------------

11. Sum of first n terms (1^3, 2^3,3^3 .... n^3) -> https://www.geeksforgeeks.org/problems/sum-of-first-n-terms5843/1

Solution: Optimal Soultion
class Solution:
    def sumOfSeries(self,n):
        #code here
        return (n * (n+1) // 2) ** 2

Loop based solution
class Solution:
    def sumOfSeries(self,n):
        #code here
        sum = 0
        for i in range (1, n+1):
            i = i*i*i
            sum = sum + i
        return sum

--------------------------------------------------------------------------------------------------------------------------

12. sum of fifth powers of the first n natural numbers (1^5, 2^5,3^5 .... n^5) -> https://www.geeksforgeeks.org/problems/sum-of-fifth-powers-of-the-first-n-natural-numbers3415/1

Solution : Loop Based Solution
class Solution:
    def sumOfFifthPowers(self,n):
        #code here
        sum = 0
        for i in range (1, n+1):
            i = i*i*i*i*i
            sum = sum + i
        return sum

--------------------------------------------------------------------------------------------------------------------------

13. squares difference -> https://www.geeksforgeeks.org/problems/squares-difference0939/1

Solution : loop based solution 
class Solution:
    def squaresDiff (self, n):
        # code here 
        sum_of_squares = 0
        square_of_sum = 0
        
        for i in range (1, n+1):
            sum_of_squares += i*i
            
        total_sum = 0    
        for i in range (1, n+1):
            total_sum += i
        square_of_sum = total_sum ** 2
        
        return abs (sum_of_squares - square_of_sum)

--------------------------------------------------------------------------------------------------------------------------

14. Reverse digits -> https://www.geeksforgeeks.org/problems/reverse-digit0316/1

Solution :
class Solution:
	def reverseDigits(self, n):
		# Code here
		reversed_number = 0
		while (n>0):
		    last_digit = n%10
		    reversed_number = reversed_number * 10 + last_digit
		    n = n//10
		    
		return reversed_number 

--------------------------------------------------------------------------------------------------------------------------

15. Count Squares -> https://www.geeksforgeeks.org/problems/count-squares3649/1

Solution : Loop based solution
import math
class Solution:
    def countSquares(self, n):
        # code here 
        count = 0
        for i in range (1, math.isqrt(n-1)+1):
            if i*i<n:
                count += 1
                
        return count

Solution : Optimal Solution 
import math
class Solution:
    def countSquares(self, n):
        if n <= 1:
            return 0
        return math.isqrt(n - 1)  # Returns floor(sqrt(n-1))

--------------------------------------------------------------------------------------------------------------------------

16. 
